from aiogram import Bot, Dispatcher, F
from aiogram.client.session import aiohttp
from aiogram.exceptions import TelegramAPIError
from aiogram.types import Message, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, PreCheckoutQuery, \
    LabeledPrice, ReplyKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
# from config import BOT_TOKEN
from catalog import catalog
from loguru import logger
import asyncio
from database import init_db, async_session
from models import User
from sqlalchemy import select
from aiohttp import web
import bitrix24
from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice
import uuid  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ payload

from pyngrok import ngrok

from state import RegisterState, router, CartState, OrderState
import os
from dotenv import load_dotenv

load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()


#–°—Ç–∞—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text.lower() == "/start")
async def start(message: Message, state: FSMContext):
    user = message.from_user

    async with async_session() as session:
        stmt = select(User).where(User.tg_id == user.id)
        result = await session.execute(stmt)
        existing_user = result.scalar_one_or_none()
        if existing_user:
            await message.answer(f"üîπ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!")
            await show_catalog(message, state)
        else:
            # –ó–∞–ø—Ä–æ—Å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            kb = ReplyKeyboardMarkup(
                keyboard=[[
                    KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
                ]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
            await state.set_state(RegisterState.waiting_for_phone)

@dp.message(RegisterState.waiting_for_phone, F.contact)
async def handle_phone(message: Message, state: FSMContext):
    contact = message.contact
    user = message.from_user

    async with async_session() as session:
        new_user = User(
            tg_id=user.id,
            phone=contact.phone_number,
            username=user.username,
            full_name=user.full_name
        )
        session.add(new_user)
        print(user)
        await bitrix24.add_contact_to_bitrix(user, contact)
        await session.commit()

    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    await show_catalog(message)
    await state.clear()

#–ü–æ–∫–∞–∑ –∫–∞—Ç–∞–ª–æ–≥–∞
async def show_catalog(message: Message, state: FSMContext):
    await state.set_state(CartState.managing_cart)

    kb = InlineKeyboardBuilder()
    for product_id, item in catalog.items():
        kb.row(
            InlineKeyboardButton(
                text=f"‚ûï {item['title']} ‚Äî {item['price']}‚≠ê",
                callback_data=f"add_{product_id}"
            )
        )
    kb.row(
        InlineKeyboardButton(text="üõí –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data="go_to_cart")
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É:", reply_markup=kb.as_markup())


#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback_query: CallbackQuery, state: FSMContext):
    product_id = callback_query.data.split("_", 1)[1]
    cart = (await state.get_data()).get("cart", {})

    cart[product_id] = cart.get(product_id, 0) + 1
    await state.update_data(cart=cart)

    item = catalog[product_id]
    await callback_query.answer(f"{item['title']} ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")


#–û–±—Ä–∞—Ç–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data == "go_to_cart")
async def go_to_cart(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        await callback_query.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    text_lines = ["üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*"]
    total = 0
    print("test")
    for product_id, quantity in cart.items():
        item = catalog.get(product_id)
        if not item:
            continue
        price = item['price'] * quantity
        total += price
        text_lines.append(f"{item['title']} x{quantity} ‚Äî {price}‚≠ê")

        kb.row(
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product_id}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product_id}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"remove_{product_id}")

        )

    text_lines.append(f"\nüí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:* {total}‚≠ê")
    kb.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment"))
    kb.row(InlineKeyboardButton(text="üîô –í—ã–π—Ç–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã", callback_data="exit_cart"))

    await callback_query.message.edit_text("\n".join(text_lines), reply_markup=kb.as_markup(), parse_mode="Markdown")




#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@dp.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    cart[product_id] = cart.get(product_id, 0) + 1
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)

@dp.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    if product_id in cart:
        if cart[product_id] > 1:
            cart[product_id] -= 1
        else:
            del cart[product_id]
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)

@dp.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    product_id = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    cart.pop(product_id, None)
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)



#–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        await callback_query.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    total = 0
    summary_lines = []
    for product_id, quantity in cart.items():
        item = catalog.get(product_id)
        if not item:
            continue

        line_total = item["price"] * quantity
        total += line_total
        summary_lines.append(f"{item['title']} x{quantity} ‚Äî {line_total}‚≠ê")

    summary_text = "\n".join(summary_lines)
    summary_text += f"\n\nüí∞ *–ò—Ç–æ–≥–æ: {total}‚≠ê*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="simulate_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ])

    await callback_query.message.answer(summary_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback_query.answer()

#–°–∏–º—É–ª—è—Ü–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "simulate_payment")
async def simulate_payment(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)
    await callback_query.answer()

@dp.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    address = message.text.strip()
    data = await state.get_data()

    # (–º–æ–∂–Ω–æ –∑–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –≤ –±–∞–∑—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    await message.answer(
        f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n"
        f"–í–∞—à –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É:\nüìç {address}",
        parse_mode="Markdown",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∞–≥–∞–∑–∏–Ω", callback_data="back_to_shop")]
        ])
    )

    # –û—á–∏—Å—Ç–∏–º –∫–æ—Ä–∑–∏–Ω—É –∏ —Å–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
@dp.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback_query: CallbackQuery):
    await callback_query.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤.")
    await callback_query.answer()



# @dp.pre_checkout_query()
# async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
#     await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)
#
# @dp.message(F.successful_payment)
# async def successful_payment(message: Message, state: FSMContext):
#     await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")
#     await state.clear()  # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É


#–û–±—Ä–∞—Ç–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω
@dp.callback_query(F.data == "back_to_shop")
async def back_to_shop(callback_query: CallbackQuery):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=f"{item['title']} ‚Äî {item['price']}‚≠ê",
                callback_data=f"product_{product_id}"
            )
        ]
        for product_id, item in catalog.items()
    ])
    await callback_query.message.answer("üõçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=kb)
    await callback_query.answer()

async def main():
    app = web.Application()
    app.router.add_post('/webhook/bitrix', bitrix24.bitrix_webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()

    print("Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
