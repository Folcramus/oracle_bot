# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
from aiogram import Bot, Dispatcher, F  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API
from aiogram.types import Message, InlineKeyboardButton, KeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder  # –£–¥–æ–±–Ω—ã–π –±–∏–ª–¥–µ—Ä –∫–ª–∞–≤–∏–∞—Ç—É—Ä
from loguru import logger  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import asyncio  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—Å—Ç—å
from database import init_db, async_session  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Å–µ—Å—Å–∏—è
from models import User  # –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
from sqlalchemy import select  # –ó–∞–ø—Ä–æ—Å—ã SQLAlchemy
from aiohttp import web  # –í–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–æ–≤
import bitrix24  # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Bitrix24 (API)
from aiogram.fsm.context import FSMContext  # –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM (–º–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π)
import os
from dotenv import load_dotenv  # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
from catalog import catalog  # –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
from state import OrderState, RegisterState  # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM

# –ó–∞–≥—Ä—É–∑–∫–∞ .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
load_dotenv()
bot = Bot(token=os.getenv("TOKEN"))
dp = Dispatcher()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –∫–æ—Ä–∑–∏–Ω—ã
async def show_main_menu(message: Message, cart_items_count: int = 0):
    kb = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category_id, category_data in catalog.items():
        kb.add(InlineKeyboardButton(
            text=category_data["name"],
            callback_data=f"category_{category_id}"
        ))

    # –ö–Ω–æ–ø–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤
    kb.row(InlineKeyboardButton(
        text=f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_items_count})",
        callback_data="go_to_cart"
    ))
    kb.row(InlineKeyboardButton(
        text=f"–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤ ",
        callback_data="go_to_orders_history"
    ))
    kb.adjust(1)
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=kb.as_markup()
    )


# –°—Ç–∞—Ä—Ç –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message(F.text.lower() == "/start")
async def start(message: Message, state: FSMContext):
    user = message.from_user

    async with async_session() as session:
        stmt = select(User).where(User.tg_id == user.id)
        result = await session.execute(stmt)
        existing_user = result.scalar_one_or_none()
        if existing_user:
            await message.answer(f"üîπ –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.full_name}!")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
            cart = (await state.get_data()).get("cart", {})
            await show_main_menu(message, len(cart))
        else:
            kb = ReplyKeyboardMarkup(
                keyboard=[[
                    KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä", request_contact=True)
                ]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=kb)
            await state.set_state(RegisterState.waiting_for_phone)


@dp.message(RegisterState.waiting_for_phone, F.contact)
async def handle_phone(message: Message, state: FSMContext):
    contact = message.contact
    user = message.from_user

    async with async_session() as session:
        new_user = User(
            tg_id=user.id,
            phone=contact.phone_number,
            username=user.username,
            full_name=user.full_name
        )
        session.add(new_user)
        print(user)
        await bitrix24.add_contact_to_bitrix(user, contact)
        await session.commit()

    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
    await show_main_menu(message)
    await state.clear()


# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@dp.callback_query(F.data.startswith("category_"))
async def show_category_items(callback: CallbackQuery):
    category_id = callback.data.split("_")[1]
    category = catalog.get(category_id)

    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    kb = InlineKeyboardBuilder()
    for product_id, product in category["items"].items():
        kb.add(InlineKeyboardButton(
            text=f"{product['title']} ‚Äî {product['price']}‚≠ê",
            callback_data=f"product_{category_id}_{product_id}"
        ))

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    kb.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_main_menu"
    ))
    kb.row(InlineKeyboardButton(
        text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
        callback_data="go_to_cart"
    ))

    await callback.message.edit_text(
        f"–¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category['name']}:",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
@dp.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return

    category_id = parts[1]
    product_id = parts[2]

    category = catalog.get(category_id)
    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    product = category["items"].get(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    kb = InlineKeyboardBuilder()
    kb.add(InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
        callback_data=f"add_{category_id}_{product_id}"
    ))
    kb.row(InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º",
        callback_data=f"category_{category_id}"
    ))
    kb.row(InlineKeyboardButton(
        text="üõí –ö–æ—Ä–∑–∏–Ω–∞",
        callback_data="go_to_cart"
    ))

    await callback.message.edit_text(
        f"<b>{product['title']}</b>\n\n"
        f"<i>{product['description']}</i>\n\n"
        f"–¶–µ–Ω–∞: {product['price']}‚≠ê",
        parse_mode="HTML",
        reply_markup=kb.as_markup()
    )
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data.startswith("add_"))
async def add_to_cart(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split("_")
    if len(parts) != 3:
        await callback.answer("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return

    category_id = parts[1]
    product_id = parts[2]

    category = catalog.get(category_id)
    if not category:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    product = category["items"].get(product_id)
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    cart = (await state.get_data()).get("cart", {})
    cart_key = f"{category_id}_{product_id}"
    cart[cart_key] = cart.get(cart_key, 0) + 1
    await state.update_data(cart=cart)

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
    await callback.answer(f"{product['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")



# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    cart = (await state.get_data()).get("cart", {})
    await show_main_menu(callback.message, len(cart))
    await callback.answer()


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query(F.data == "go_to_cart")
async def go_to_cart(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        await callback.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    kb = InlineKeyboardBuilder()
    text_lines = ["üõí *–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:*"]
    total = 0

    for product_key, quantity in cart.items():
        category_id, product_id = product_key.split("_")
        item = catalog.get(category_id, {}).get("items", {}).get(product_id)
        if not item:
            continue

        price = item['price'] * quantity
        total += price
        text_lines.append(f"{item['title']} x{quantity} ‚Äî {price}‚≠ê")

        kb.row(
            InlineKeyboardButton(text="‚ûñ", callback_data=f"decrease_{product_key}"),
            InlineKeyboardButton(text="‚ûï", callback_data=f"increase_{product_key}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"remove_{product_key}")
        )

    text_lines.append(f"\nüí∞ *–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞:* {total}‚≠ê")
    kb.row(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="confirm_payment"))
    kb.row(InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu"))

    await callback.message.edit_text("\n".join(text_lines), reply_markup=kb.as_markup(), parse_mode="Markdown")
    await callback.answer()


# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ
@dp.callback_query(F.data.startswith("increase_"))
async def increase_quantity(callback: CallbackQuery, state: FSMContext):
    product_key = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    cart[product_key] = cart.get(product_key, 0) + 1
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)


@dp.callback_query(F.data.startswith("decrease_"))
async def decrease_quantity(callback: CallbackQuery, state: FSMContext):
    product_key = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    if product_key in cart:
        if cart[product_key] > 1:
            cart[product_key] -= 1
        else:
            del cart[product_key]
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)

#–£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
@dp.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery, state: FSMContext):
    product_key = callback.data.split("_", 1)[1]
    data = await state.get_data()
    cart = data.get("cart", {})
    cart.pop(product_key, None)
    await state.update_data(cart=cart)
    await go_to_cart(callback, state)


# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        await callback.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", show_alert=True)
        return

    total = 0
    summary_lines = []
    for product_key, quantity in cart.items():
        category_id, product_id = product_key.split("_")
        item = catalog.get(category_id, {}).get("items", {}).get(product_id)
        if not item:
            continue

        line_total = item["price"] * quantity
        total += line_total
        summary_lines.append(f"{item['title']} x{quantity} ‚Äî {line_total}‚≠ê")

    summary_text = "\n".join(summary_lines)
    summary_text += f"\n\nüí∞ *–ò—Ç–æ–≥–æ: {total}‚≠ê*\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ–ø–ª–∞—Ç—É."

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data="simulate_payment")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_payment")]
    ])

    await callback.message.answer(summary_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


# –°–∏–º—É–ª—è—Ü–∏—è –æ–ø–ª–∞—Ç—ã
@dp.callback_query(F.data == "simulate_payment")
async def simulate_payment(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderState.waiting_for_address)
    await callback.answer()


# –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    address = message.text.strip()
    data = await state.get_data()
    cart = data.get("cart", {})

    if not cart:
        await message.answer("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        await state.clear()
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    async with async_session() as session:
        stmt = select(User).where(User.tg_id == message.from_user.id)
        result = await session.execute(stmt)
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return

        user_data = {
            "full_name": user.full_name,
            "phone": user.phone,
            "tg_id": message.from_user.id,

        }

    # –°–æ–∑–¥–∞–µ–º —Å–¥–µ–ª–∫—É –≤ Bitrix24
    deal_result = await bitrix24.create_bitrix_deal(user_data, cart, address)

    if deal_result:
        print(deal_result.get('deal_id'))
        await message.answer(
            f"‚úÖ *–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!*\n"
            f"–ù–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: {deal_result.get('deal_id')}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {address}\n\n"
            f"–° –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            parse_mode="Markdown",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
        )

        # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ —Å–¥–µ–ª–∫–∞ –≤ Bitrix24: ID {deal_result.get} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}")
    else:
        await message.answer(
            "‚ö†Ô∏è –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏. "
            "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.tg_id}")

    # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    await state.update_data(cart={})
    await state.clear()

#–ò—Å—Ç–æ—Ä–∏—è –∑–∞–∫–∞–∑–æ–≤
@dp.callback_query(F.data == "go_to_orders_history")
async def go_to_orders_history(callback: CallbackQuery):
    tg_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏ —á–µ—Ä–µ–∑ API Bitrix24
    deals = await bitrix24.show_user_deals(str(tg_id))

    if deals:

        await callback.message.answer(deals)
    else:
        await callback.message.answer("üîπ –£ –≤–∞—Å –Ω–µ—Ç —Å–¥–µ–ª–æ–∫.")


@dp.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery):
    await callback.message.answer("‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–æ–≤–∞—Ä–æ–≤.")
    await callback.answer()


async def main():
    await init_db()
    app = web.Application()
    app.router.add_post('/webhook/bitrix', bitrix24.bitrix_webhook_handler)

    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, 'localhost', 8080)
    await site.start()

    print("Webhook —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8080")
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())