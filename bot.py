from aiogram import Bot, Dispatcher, F
from aiogram.exceptions import TelegramAPIError
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, PreCheckoutQuery, LabeledPrice
from aiogram.enums import ParseMode, ContentType
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import BOT_TOKEN, PROVIDER_TOKEN
from catalog import catalog
from loguru import logger
import asyncio
from database import init_db, async_session
from models import User
from sqlalchemy import select
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()


@dp.message(F.text.lower() == "/start")
async def start(message: Message):
        user = message.from_user
        phone = user.phone_number if hasattr(user,
                                             "phone_number") else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"  # ‚Üê —ç—Ç–æ—Ç –∞—Ç—Ä–∏–±—É—Ç –æ–±—ã—á–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

        async with async_session() as session:
            stmt = select(User).where(User.tg_id == user.id)
            result = await session.execute(stmt)
            existing_user = result.scalar_one_or_none()

            if existing_user:
                await message.answer("üîπ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            else:
                new_user = User(
                    tg_id=user.id,
                    phone=phone,
                    username=user.username,
                    full_name=user.full_name
                )
                session.add(new_user)
                await session.commit()
                await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç, {user.full_name}!\n–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")

            kb = InlineKeyboardBuilder()
            for product_id, item in catalog.items():
                kb.add(
                    InlineKeyboardButton(
                        text=f"{item['title']} ‚Äî {item['price']}‚≠ê",
                        callback_data=f"{product_id}",
                        pay=True
                    )
                )
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –º–∞–≥–∞–∑–∏–Ω! –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("product_"))
async def process_buy(callback_query):
    product_id = callback_query.data
    item = catalog.get(product_id)

    if not item:
        logger.warning(f"–¢–æ–≤–∞—Ä {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback_query.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback_query.from_user.id} –≤—ã–±–∏—Ä–∞–µ—Ç {item['title']}")

    try:
        await bot.send_invoice(
            chat_id=callback_query.from_user.id,
            title=item["title"],
            description=item["description"],
            payload=f"order_{product_id}_item_{item['price']}",
            provider_token=PROVIDER_TOKEN,  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
            currency="XTR",  # –í–∞–ª—é—Ç–∞ Stars
            prices=[
                LabeledPrice(
                    label=item["title"],
                    amount=100  # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º Stars –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã
                )
            ],
            need_name=True,
            need_email=False,
            is_flexible=False,
            max_tip_amount=100000,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —á–∞–µ–≤—ã—Ö (10 Stars)
            suggested_tip_amounts=[10000, 20000, 30000, 40000]  # –í–∞—Ä–∏–∞–Ω—Ç—ã —á–∞–µ–≤—ã—Ö (1-4 Stars)
        )
        await callback_query.answer()
    except TelegramAPIError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á—ë—Ç–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞.")


@dp.pre_checkout_query()
async def pre_checkout_query(pre_checkout_q: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_q.id, ok=True)


@dp.message(F.successful_payment)
async def successful_payment(message: Message):
    await message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É.")


if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
