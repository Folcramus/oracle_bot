import os
from asyncio.log import logger
from typing import Optional

import requests
from aiogram.client.session import aiohttp
import ssl
from aiohttp import web
from aiogram import Bot
from dotenv import load_dotenv

from catalog import catalog  # –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSL-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ—Ç–∫–ª—é—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ ‚Äî –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–Ω)
ssl_context = ssl.create_default_context()
ssl_context.check_hostname = False
ssl_context.verify_mode = ssl.CERT_NONE

# –í–µ–±—Ö—É–∫–∏ Bitrix24
BITRIX_WEBHOOK_BASE = 'https://b24-mwcobf.bitrix24.ru/rest/1/7ili29rp79a2sq66/'
BITRIX_WEBHOOK = "https://b24-mwcobf.bitrix24.ru/rest/12/9mv0ulk31p44kbxv/"
BITRIX_PRODUCT_ADD_WEBHOOK = 'https://b24-mwcobf.bitrix24.ru/rest/1/tgo0yqf0ypvc3s8c'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram-–±–æ—Ç–∞
bot = Bot(token=os.getenv("TOKEN"))




# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫ –ø–æ tg_id
async def find_deals_by_tg_id(tg_id: str):
    try:
        result = await call(
            'crm.deal.list',
            'https://b24-mwcobf.bitrix24.ru/rest/1/oou0i0wx1ml7kfdg',
            {'filter': {'UF_CRM_1746104614683': tg_id}, 'select': ['ID', 'TITLE', 'STAGE_ID']}
        )

        deals = result.get('result', [])
        if not deals:
            logger.info(f"–ù–µ—Ç —Å–¥–µ–ª–æ–∫ –¥–ª—è tg_id: {tg_id}")
            return None

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(deals)} —Å–¥–µ–ª–æ–∫ –¥–ª—è tg_id: {tg_id}")
        return deals

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–¥–µ–ª–æ–∫ –ø–æ tg_id {tg_id}: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–¥–µ–ª–æ–∫ –ø–æ tg_id
async def show_user_deals(tg_id: str):
    deals = await find_deals_by_tg_id(tg_id)
    if not deals:
        return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ "

    message = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
    for deal in deals:
        deal_id = deal['ID']
        deal_title = deal['TITLE']
        stage_id = deal['STAGE_ID']
        message += f"‚Ä¢ –ó–∞–∫–∞–∑ #{deal_id} - {deal_title} (–°—Ç–∞–¥–∏—è: {stage_id})\n"

    return message


# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ
def find_item(category_id, item_id):
    category = catalog.get(category_id)
    if category is None:
        return None
    return category["items"].get(item_id)


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑–æ–≤–∞ –º–µ—Ç–æ–¥–æ–≤ Bitrix24 —á–µ—Ä–µ–∑ API
async def call(method: str, webhookurl: str, params=None):
    url = f"{webhookurl}/{method}"
    async with aiohttp.ClientSession() as session:
        async with session.post(url, json=params, ssl=ssl_context) as response:
            if response.status == 200:
                return await response.json()
            else:
                error = await response.text()
                raise Exception(f"Bitrix24 API error: {error}")


# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ Bitrix24
async def create_bitrix_product(product_data: dict) -> Optional[int]:
    title = product_data.get('title')
    price = product_data.get('price', 0)
    currency = product_data.get('currency', 'RUB')
    description = product_data.get('description', '')
    active = product_data.get('active', 'Y')

    if not title:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤ Bitrix24")
        return None

    product_params = {
        "NAME": title,
        "PRICE": price,
        "CURRENCY_ID": currency,
        "DESCRIPTION": description,
        "ACTIVE": active
    }

    try:
        result = await call('crm.product.add', BITRIX_PRODUCT_ADD_WEBHOOK, {"fields": product_params})
        product_id = result.get('result')
        if product_id:
            logger.info(f"‚úÖ –¢–æ–≤–∞—Ä '{title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ Bitrix24. ID: {product_id}")
            return product_id
        else:
            logger.warning(f"‚ö†Ô∏è –¢–æ–≤–∞—Ä '{title}' –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å. –û—Ç–≤–µ—Ç: {result}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ Bitrix24: {e}")
        return None


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –≤ Bitrix24
async def add_contact_to_bitrix(user, contact):
    contact_data = {
        "fields": {
            "NAME": user.first_name,
            "LAST_NAME": user.last_name or "",
            "PHONE": [{"VALUE": str(contact.phone_number), "VALUE_TYPE": "WORK"}],
            "OPENED": "Y",
            "TYPE_ID": "CLIENT",
            "SOURCE_ID": "SELF",
            "UF_CRM_1746084153598": user.id,
            "UF_CRM_1746084215487": user.username,
        }
    }

    try:
        response = requests.post(BITRIX_WEBHOOK + "crm.contact.add.json", json=contact_data)
        result = response.json()

        if "result" in result:
            print(f"–ö–æ–Ω—Ç–∞–∫—Ç —Å–æ–∑–¥–∞–Ω –≤ Bitrix24: ID {result['result']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞:", result)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Bitrix24: {e}")


# –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
async def find_or_create_product_by_name(product_data: str, data: dict) -> Optional[int]:
    if not product_data:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞/—Å–æ–∑–¥–∞–Ω–∏—è")
        return None

    try:
        result = await call(
            'crm.product.list',
            'https://b24-mwcobf.bitrix24.ru/rest/1/al3jruylxn04pp75',
            {'filter': {'%NAME': product_data}, 'select': ['ID', 'NAME']}
        )

        matches = result.get('result', [])
        logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é '{product_data}'")

        for product in matches:
            if product_data.strip().lower() == product.get('NAME', '').strip().lower():
                return product['ID']

        if matches:
            logger.warning("‚ö†Ô∏è –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤–æ–µ —á–∞—Å—Ç–∏—á–Ω–æ–µ.")
            return matches[0].get('ID')

        return await create_bitrix_product(data)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ/—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ Bitrix24: {e}")
        return None


# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
async def get_or_create_bitrix_product(product_data: dict) -> Optional[int]:
    title = product_data.get("title")
    if not title:
        logger.error("‚ùå –í product_data –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ 'title'")
        return None

    return await find_or_create_product_by_name(title, product_data)


# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞–¥–∏–∏ —Å–¥–µ–ª–∫–∏ –ø–æ –µ—ë ID
async def get_stage_name(stage_id):
    async with aiohttp.ClientSession() as session:
        async with session.get(
                "https://b24-mwcobf.bitrix24.ru/rest/1/yv1u9k02uz1cp5xe/crm.status.list.json",
                params={"filter[ENTITY_ID]": "DEAL_STAGE"},
                ssl=ssl_context
        ) as resp:
            status_response = await resp.json()
            for status in status_response.get("result", []):
                if status["STATUS_ID"] == stage_id:
                    return status["NAME"]
    return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç–∞–¥–∏—è ({stage_id})"


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –≤–µ–±—Ö—É–∫–æ–≤ –æ—Ç Bitrix24
async def bitrix_webhook_handler(request):
    try:
        data = await request.post()
        event = data.get('event')

        if event == 'ONCRMDEALUPDATE':
            deal_id = data.get('data[FIELDS][ID]')

            async with aiohttp.ClientSession() as session:
                async with session.get(
                        f"{BITRIX_WEBHOOK_BASE}/crm.deal.get.json",
                        params={"id": deal_id},
                        ssl=ssl_context
                ) as resp:
                    deal_response = await resp.json()

            deal_info = deal_response.get("result")
            if not deal_info:
                await bot.send_message(482460555, f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–¥–µ–ª–∫—É #{deal_id}")
                return web.json_response({'status': 'no deal'})

            stage_id = deal_info.get("STAGE_ID")
            stage_name = await get_stage_name(stage_id)
            tg_id = ''
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–¥–µ–ª–∫–µ
            message_lines = [f"üßæ –°–¥–µ–ª–∫–∞ #{deal_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞:"]
            message_lines.append(f"‚Ä¢ –°—Ç–∞–¥–∏—è: {stage_name} ({stage_id})")
            for key, value in deal_info.items():
                if value == 'NEW' or value == 'WON':
                    return web.json_response({'status': '<UNK> <UNK>'})
                if key == 'UF_CRM_1746104614683':
                    tg_id = value

            message_text = "\n".join(message_lines)
            await bot.send_message(tg_id, message_text)

        return web.json_response({'status': 'ok'})

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞:", str(e))
        return web.json_response({'status': 'error', 'details': str(e)}, status=500)


# –°–æ–∑–¥–∞–Ω–∏–µ —Å–¥–µ–ª–∫–∏ –≤ Bitrix24 —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def create_bitrix_deal(user_data: dict, cart_items: dict, address: str):
    product_rows = []
    total = 0

    for product_key, quantity in cart_items.items():
        category_id, product_id = product_key.split("_")
        item = find_item(category_id, product_id)
        if not item:
            logger.warning(f"‚õî –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ: {product_key}")
            continue

        bitrix_product_id = await get_or_create_bitrix_product(item)
        if not bitrix_product_id:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å/–ø–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ Bitrix: {item['title']}")
            continue

        item['bitrix_product_id'] = bitrix_product_id
        price = item['price']
        total += price * quantity

        product_rows.append({
            "PRODUCT_ID": bitrix_product_id,
            "PRICE": price,
            "QUANTITY": quantity,
            "CUSTOMIZED": "Y",
            "DISCOUNT_RATE": 0,
            "TAX_RATE": 0,
        })

    deal_data = {
        "TITLE": f"–ó–∞–∫–∞–∑ –æ—Ç {user_data.get('full_name')}",
        "UF_CRM_1746090729665": address,
        "TYPE_ID": "SALE",
        "STAGE_ID": "NEW",
        "OPPORTUNITY": total,
        "CURRENCY_ID": "RUB",
        "ASSIGNED_BY_ID": 1,
        "UF_CRM_1746104614683": user_data.get('tg_id'),
    }

    try:
        deal_result = await call('crm.deal.add', 'https://b24-mwcobf.bitrix24.ru/rest/1/d8l4vrh162o8kmmk', {"fields": deal_data})
        deal_id = deal_result.get("result")

        if not deal_id:
            logger.error("‚ùå –°–¥–µ–ª–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –ù–µ—Ç ID.")
            return None

        logger.info(f"‚úÖ –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ID {deal_id}")

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –∫ —Å–¥–µ–ª–∫–µ
        if product_rows:
            set_result = await call('crm.deal.productrows.set', 'https://b24-mwcobf.bitrix24.ru/rest/1/duq9ee50zjzeh680', {
                "ID": deal_id,
                "rows": product_rows
            })
            logger.info(f"üì¶ –¢–æ–≤–∞—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ —Å–¥–µ–ª–∫–µ {deal_id}: {set_result}")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫ —Å–¥–µ–ª–∫–µ {deal_id}")

        return {
            "deal_id": deal_id,
            "products": [p['PRODUCT_ID'] for p in product_rows],
            "total": total
        }

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–¥–µ–ª–∫–∏ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return None
